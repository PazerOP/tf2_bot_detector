name: build

on:
  push:
    paths-ignore:
      - 'schemas/**.json'
      - 'staging/cfg/**.json'
      - '*.md'

jobs:
  ci:
    env:
      TF2BD_BUILD_DIR: "${{ github.workspace }}/tf2bd_cmake_build_dir/"

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        triplet: [x86-windows, x64-windows]
        discord_integration: [true, false]
        include:
          - os: windows-latest
            triplet: x86-windows
            tf2bd_arch: x86
            build_arch: Win32
          - os: windows-latest
            triplet: x64-windows
            tf2bd_arch: x64
            build_arch: x64


    steps:
    - uses: olegtarasov/get-tag@v2 # GIT_TAG_NAME
    - uses: benjlevesque/short-sha@v1.1
      id: short_sha

    - name: Config artifact name (tag)
      if: startsWith(github.ref, 'refs/tags/')
      run: echo "::set-env name=TF2BD_VERSION::${{ env.GIT_TAG_NAME }}"

    - name: Config artifact name (SHA)
      if: ${{ !startsWith(github.ref, 'refs/tags/') }}
      run: echo "::set-env name=TF2BD_VERSION::${{ steps.short_sha.outputs.sha }}"

    - name: Determine artifact behavior
      if: matrix.discord_integration == true
      run: echo "::set-env name=TF2BD_ENABLE_ARTIFACT_UPLOAD::1"

    - name: Debug
      run: |
        echo "github.event_name = ${{ github.event_name }}"
        echo "github.sha = ${{ github.sha }}"
        echo "github.ref = ${{ github.ref }}"
        echo "matrix.os = ${{ matrix.os }}"
        echo "matrix.triplet = ${{ matrix.triplet }}"
        echo "matrix.discord_integration = ${{ matrix.discord_integration }}"
        echo "matrix.tf2bd_arch = ${{ matrix.tf2bd_arch }}"
        echo "matrix.build_arch = ${{ matrix.build_arch }}"
        echo "env.TF2BD_ENABLE_ARTIFACT_UPLOAD = ${{ env.TF2BD_ENABLE_ARTIFACT_UPLOAD }}"

    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: run-vcpkg
      uses: lukka/run-vcpkg@v3.2
      with:
        vcpkgGitCommitId: 7c82b03faf93e607c722e518819a54e4359aeddc
        vcpkgArguments: 'SDL2 openSSL glbinding cpp-httplib libzippp cppcoro fmt discord-game-sdk'
        vcpkgTriplet: ${{ matrix.triplet }}

    - name: CMake
      if: ${{ startsWith(matrix.os, 'windows') }}
      run: |
        mkdir "${{ env.TF2BD_BUILD_DIR }}"
        cd "${{ env.TF2BD_BUILD_DIR }}"
        cmake -A${{ matrix.build_arch }} -DTF2BD_IS_CI_COMPILE=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE="${{ env.RUNVCPKG_VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake" -DCMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE="${{ env.TF2BD_BUILD_DIR }}" -DTF2BD_ENABLE_DISCORD_INTEGRATION=${{ matrix.discord_integration }} ../
        cmake --build . --config Release

    - name: Sign artifacts
      if: ${{ startsWith(matrix.os, 'windows') }}
      uses: PazerOP/code-sign-action@v3
      with:
        folder: '${{ env.TF2BD_BUILD_DIR }}'
        certificate: '${{ secrets.CERTIFICATE_PFX_BASE64 }}'
        password: '${{ secrets.CERTIFICATE_PFX_PASSWORD }}'

    - name: "Artifacts: Fresh, signed exe"
      if: env.TF2BD_ENABLE_ARTIFACT_UPLOAD && startsWith(matrix.os, 'windows')
      uses: actions/upload-artifact@v2
      with:
        name: "smartscreen_${{ matrix.triplet }}"
        path: "${{ env.TF2BD_BUILD_DIR }}/*.exe"

    - name: "Artifacts: Prepare staging/"
      if: startsWith(matrix.os, 'windows')
      shell: bash
      run: |
        cp "${{ env.TF2BD_BUILD_DIR }}/*.exe" "${{ env.TF2BD_BUILD_DIR }}/*.dll" "${{ github.workspace }}/staging/"

    - name: Smartscreen workaround
      if: ${{ startsWith(matrix.os, 'windows') }}
      run: |
        echo "Hash of current exe: "
        sha1sum "${{ github.workspace }}/staging/tf2_bot_detector.exe"
        copy "${{ github.workspace }}/smartscreen/${{ matrix.tf2bd_arch }}/tf2_bot_detector.exe" "${{ github.workspace }}/staging/tf2_bot_detector.exe"
        echo "Hash of cached exe: "
        sha1sum "${{ github.workspace }}/staging/tf2_bot_detector.exe"

    - name: "Artifacts: Upload staging/"
      if: env.TF2BD_ENABLE_ARTIFACT_UPLOAD && startsWith(matrix.os, 'windows')
      uses: actions/upload-artifact@v2
      with:
        name: "tf2_bot_detector_${{ matrix.triplet }}_${{ env.TF2BD_VERSION }}"
        if-no-files-found: error
        path: ${{ github.workspace }}/staging/

    - name: "Artifacts: symbols"
      if: env.TF2BD_ENABLE_ARTIFACT_UPLOAD && startsWith(matrix.os, 'windows')
      uses: actions/upload-artifact@v2
      with:
        name: "symbols_${{ matrix.triplet }}_${{ env.TF2BD_VERSION }}"
        path: "${{ env.TF2BD_BUILD_DIR }}/*.pdb"
